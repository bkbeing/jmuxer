{"version":3,"file":"jmuxer.min.js","sources":["../src/util/debug.js","../src/util/nalu.js","../src/util/exp-golomb.js","../src/parsers/h264.js","../src/parsers/aac.js","../src/parsers/opus.js","../src/util/event.js","../src/util/mp4-generator.js","../src/remuxer/base.js","../src/remuxer/aac.js","../src/remuxer/opus.js","../src/remuxer/h264.js","../src/util/utils.js","../src/controller/remux.js","../src/controller/buffer.js","../src/jmuxer.js"],"sourcesContent":["let logger;\nlet errorLogger;\n\nexport function setLogger() {\n    /*eslint-disable */\n    logger = console.log;\n    errorLogger = console.error;\n    /*eslint-enable */\n}\n\nexport function isEnable() {\n    return logger != null;\n}\n\nexport function log(message, ...optionalParams) {\n    if (logger) {\n        logger(message, ...optionalParams);\n    }\n}\nexport function error(message, ...optionalParams) {\n    if (errorLogger) {\n        errorLogger(message, ...optionalParams);\n    }\n}\n","export class NALU {\n\n    static get NDR() { return 1; }\n    static get IDR() { return 5; }\n    static get SEI() { return 6; }\n    static get SPS() { return 7; }\n    static get PPS() { return 8; }\n    static get AUD() { return 9; }\n\n    static get TYPES() {\n        return {\n            [NALU.IDR]: 'IDR',\n            [NALU.SEI]: 'SEI',\n            [NALU.SPS]: 'SPS',\n            [NALU.PPS]: 'PPS',\n            [NALU.NDR]: 'NDR',\n            [NALU.AUD]: 'AUD',\n        };\n    }\n\n    static type(nalu) {\n        if (nalu.ntype in NALU.TYPES) {\n            return NALU.TYPES[nalu.ntype];\n        } else {\n            return 'UNKNOWN';\n        }\n    }\n\n    constructor(data) {\n        this.payload = data;\n        this.nri = (this.payload[0] & 0x60) >> 5;\n        this.ntype = this.payload[0] & 0x1f;\n    }\n\n    toString() {\n        return `${NALU.type(this)}: NRI: ${this.getNri()}`;\n    }\n\n    getNri() {\n        return this.nri >> 6;\n    }\n\n    type() {\n        return this.ntype;\n    }\n\n    isKeyframe() {\n        return this.ntype == NALU.IDR;\n    }\n\n    getSize() {\n        return 4 + this.payload.byteLength;\n    }\n\n    getData() {\n        const result = new Uint8Array(this.getSize());\n        const view = new DataView(result.buffer);\n        view.setUint32(0, this.getSize() - 4);\n\n        result.set(this.payload, 4);\n        return result;\n    }\n}\n","/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n*/\n\nexport class ExpGolomb {\n\n    constructor(data) {\n        this.data = data;\n        this.index = 0;\n        this.bitLength = data.byteLength * 8;\n    }\n\n    get bitsAvailable() {\n        return this.bitLength - this.index;\n    }\n\n    skipBits(size) {\n        // console.log(`  skip bits: size=${size}, ${this.index}.`);\n        if (this.bitsAvailable < size) {\n            //throw new Error('no bytes available');\n            return false;\n        }\n        this.index += size;\n    }\n\n    readBits(size, moveIndex = true) {\n        // console.log(`  read bits: size=${size}, ${this.index}.`);\n        const result = this.getBits(size, this.index, moveIndex);\n        // console.log(`    read bits: result=${result}`);\n        return result;\n    }\n\n    getBits(size, offsetBits, moveIndex = true) {\n        if (this.bitsAvailable < size) {\n            //throw new Error('no bytes available');\n            return 0;\n        }\n        const offset = offsetBits % 8;\n        const byte = this.data[(offsetBits / 8) | 0] & (0xff >>> offset);\n        const bits = 8 - offset;\n        if (bits >= size) {\n            if (moveIndex) {\n                this.index += size;\n            }\n            return byte >> (bits - size);\n        } else {\n            if (moveIndex) {\n                this.index += bits;\n            }\n            const nextSize = size - bits;\n            return (byte << nextSize) | this.getBits(nextSize, offsetBits + bits, moveIndex);\n        }\n    }\n\n    skipLZ() {\n        let leadingZeroCount;\n        for (leadingZeroCount = 0; leadingZeroCount < this.bitLength - this.index; ++leadingZeroCount) {\n            if (this.getBits(1, this.index + leadingZeroCount, false) !== 0) {\n                // console.log(`  skip LZ  : size=${leadingZeroCount}, ${this.index}.`);\n                this.index += leadingZeroCount;\n                return leadingZeroCount;\n            }\n        }\n        return leadingZeroCount;\n    }\n\n    skipUEG() {\n        this.skipBits(1 + this.skipLZ());\n    }\n\n    skipEG() {\n        this.skipBits(1 + this.skipLZ());\n    }\n\n    readUEG() {\n        const prefix = this.skipLZ();\n        return this.readBits(prefix + 1) - 1;\n    }\n\n    readEG() {\n        const value = this.readUEG();\n        if (0x01 & value) {\n            // the number is odd if the low order bit is set\n            return (1 + value) >>> 1; // add 1 to make it even, and divide by 2\n        } else {\n            return -1 * (value >>> 1); // divide by two then make it negative\n        }\n    }\n\n    readBoolean() {\n        return this.readBits(1) === 1;\n    }\n    readUByte(numberOfBytes = 1) {\n        return this.readBits((numberOfBytes * 8));\n    }\n    readUShort() {\n        return this.readBits(16);\n    }\n    readUInt() {\n        return this.readBits(32);\n    }\n}\n\n","import { ExpGolomb } from '../util/exp-golomb.js';\nimport { NALU } from '../util/nalu.js';\nimport * as debug from '../util/debug';\n\nexport class H264Parser {\n\n    static extractNALu(buffer) {\n        let i = 0,\n            length = buffer.byteLength,\n            value,\n            state = 0,\n            result = [],\n            lastIndex;\n\n        while (i < length) {\n            value = buffer[i++];\n            // finding 3 or 4-byte start codes (00 00 01 OR 00 00 00 01)\n            switch (state) {\n                case 0:\n                    if (value === 0) {\n                        state = 1;\n                    }\n                    break;\n                case 1:\n                    if (value === 0) {\n                        state = 2;\n                    } else {\n                        state = 0;\n                    }\n                    break;\n                case 2:\n                case 3:\n                    if (value === 0) {\n                        state = 3;\n                    } else if (value === 1 && i < length) {\n                        if (lastIndex) {\n                            result.push(buffer.subarray(lastIndex, i - state -1));\n                        }\n                        lastIndex = i;\n                        state = 0;\n                    } else {\n                        state = 0;\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if (lastIndex) {\n            result.push(buffer.subarray(lastIndex, length));\n        }\n        return result;\n    }\n\n    /**\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\n     * list is optionally transmitted as part of a sequence parameter\n     * set and is not relevant to transmuxing.\n     * @param decoder {ExpGolomb} exp golomb decoder\n     * @param count {number} the number of entries in this scaling list\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n     */\n    static skipScalingList(decoder, count) {\n        let lastScale = 8,\n            nextScale = 8,\n            deltaScale;\n        for (let j = 0; j < count; j++) {\n            if (nextScale !== 0) {\n                deltaScale = decoder.readEG();\n                nextScale = (lastScale + deltaScale + 256) % 256;\n            }\n            lastScale = (nextScale === 0) ? lastScale : nextScale;\n        }\n    }\n\n    /**\n     * Read a sequence parameter set and return some interesting video\n     * properties. A sequence parameter set is the H264 metadata that\n     * describes the properties of upcoming video frames.\n     * @param data {Uint8Array} the bytes of a sequence parameter set\n     * @return {object} an object with configuration parsed from the\n     * sequence parameter set, including the dimensions of the\n     * associated video frames.\n     */\n    static readSPS(data) {\n        let decoder = new ExpGolomb(data);\n        let frameCropLeftOffset = 0,\n            frameCropRightOffset = 0,\n            frameCropTopOffset = 0,\n            frameCropBottomOffset = 0,\n            sarScale = 1,\n            profileIdc,\n            profileCompat,\n            levelIdc,\n            numRefFramesInPicOrderCntCycle,\n            picWidthInMbsMinus1,\n            picHeightInMapUnitsMinus1,\n            frameMbsOnlyFlag,\n            scalingListCount;\n        decoder.readUByte();\n        profileIdc = decoder.readUByte(); // profile_idc\n        profileCompat = decoder.readBits(5); // constraint_set[0-4]_flag, u(5)\n        decoder.skipBits(3); // reserved_zero_3bits u(3),\n        levelIdc = decoder.readUByte(); // level_idc u(8)\n        decoder.skipUEG(); // seq_parameter_set_id\n        // some profiles have more optional data we don't need\n        if (profileIdc === 100 ||\n            profileIdc === 110 ||\n            profileIdc === 122 ||\n            profileIdc === 244 ||\n            profileIdc === 44 ||\n            profileIdc === 83 ||\n            profileIdc === 86 ||\n            profileIdc === 118 ||\n            profileIdc === 128) {\n            var chromaFormatIdc = decoder.readUEG();\n            if (chromaFormatIdc === 3) {\n                decoder.skipBits(1); // separate_colour_plane_flag\n            }\n            decoder.skipUEG(); // bit_depth_luma_minus8\n            decoder.skipUEG(); // bit_depth_chroma_minus8\n            decoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n            if (decoder.readBoolean()) { // seq_scaling_matrix_present_flag\n                scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n                for (let i = 0; i < scalingListCount; ++i) {\n                    if (decoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n                        if (i < 6) {\n                            H264Parser.skipScalingList(decoder, 16);\n                        } else {\n                            H264Parser.skipScalingList(decoder, 64);\n                        }\n                    }\n                }\n            }\n        }\n        decoder.skipUEG(); // log2_max_frame_num_minus4\n        var picOrderCntType = decoder.readUEG();\n        if (picOrderCntType === 0) {\n            decoder.readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n        } else if (picOrderCntType === 1) {\n            decoder.skipBits(1); // delta_pic_order_always_zero_flag\n            decoder.skipEG(); // offset_for_non_ref_pic\n            decoder.skipEG(); // offset_for_top_to_bottom_field\n            numRefFramesInPicOrderCntCycle = decoder.readUEG();\n            for (let i = 0; i < numRefFramesInPicOrderCntCycle; ++i) {\n                decoder.skipEG(); // offset_for_ref_frame[ i ]\n            }\n        }\n        decoder.skipUEG(); // max_num_ref_frames\n        decoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n        picWidthInMbsMinus1 = decoder.readUEG();\n        picHeightInMapUnitsMinus1 = decoder.readUEG();\n        frameMbsOnlyFlag = decoder.readBits(1);\n        if (frameMbsOnlyFlag === 0) {\n            decoder.skipBits(1); // mb_adaptive_frame_field_flag\n        }\n        decoder.skipBits(1); // direct_8x8_inference_flag\n        if (decoder.readBoolean()) { // frame_cropping_flag\n            frameCropLeftOffset = decoder.readUEG();\n            frameCropRightOffset = decoder.readUEG();\n            frameCropTopOffset = decoder.readUEG();\n            frameCropBottomOffset = decoder.readUEG();\n        }\n        if (decoder.readBoolean()) {\n            // vui_parameters_present_flag\n            if (decoder.readBoolean()) {\n                // aspect_ratio_info_present_flag\n                let sarRatio;\n                const aspectRatioIdc = decoder.readUByte();\n                switch (aspectRatioIdc) {\n                    case 1: sarRatio = [1, 1]; break;\n                    case 2: sarRatio = [12, 11]; break;\n                    case 3: sarRatio = [10, 11]; break;\n                    case 4: sarRatio = [16, 11]; break;\n                    case 5: sarRatio = [40, 33]; break;\n                    case 6: sarRatio = [24, 11]; break;\n                    case 7: sarRatio = [20, 11]; break;\n                    case 8: sarRatio = [32, 11]; break;\n                    case 9: sarRatio = [80, 33]; break;\n                    case 10: sarRatio = [18, 11]; break;\n                    case 11: sarRatio = [15, 11]; break;\n                    case 12: sarRatio = [64, 33]; break;\n                    case 13: sarRatio = [160, 99]; break;\n                    case 14: sarRatio = [4, 3]; break;\n                    case 15: sarRatio = [3, 2]; break;\n                    case 16: sarRatio = [2, 1]; break;\n                    case 255: {\n                        sarRatio = [decoder.readUByte() << 8 | decoder.readUByte(), decoder.readUByte() << 8 | decoder.readUByte()];\n                        break;\n                    }\n                }\n                if (sarRatio) {\n                    sarScale = sarRatio[0] / sarRatio[1];\n                }\n            }\n            if (decoder.readBoolean()) { decoder.skipBits(1); }\n\n            if (decoder.readBoolean()) {\n                decoder.skipBits(4);\n                if (decoder.readBoolean()) {\n                    decoder.skipBits(24);\n                }\n            }\n            if (decoder.readBoolean()) {\n                decoder.skipUEG();\n                decoder.skipUEG();\n            }\n            if (decoder.readBoolean()) {\n                let unitsInTick = decoder.readUInt();\n                let timeScale = decoder.readUInt();\n                let fixedFrameRate = decoder.readBoolean();\n                let frameDuration = timeScale / (2 * unitsInTick);\n            }\n        }\n        return {\n            width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n            height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - ((frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset)),\n        };\n    }\n\n    constructor(remuxer) {\n        this.remuxer = remuxer;\n        this.track = remuxer.mp4track;\n    }\n\n    parseSPS(sps) {\n        var config = H264Parser.readSPS(new Uint8Array(sps));\n\n        this.track.width = config.width;\n        this.track.height = config.height;\n        this.track.sps = [new Uint8Array(sps)];\n        this.track.codec = 'avc1.';\n\n        let codecarray = new DataView(sps.buffer, sps.byteOffset + 1, 4);\n        for (let i = 0; i < 3; ++i) {\n            var h = codecarray.getUint8(i).toString(16);\n            if (h.length < 2) {\n                h = '0' + h;\n            }\n            this.track.codec += h;\n        }\n    }\n\n    parsePPS(pps) {\n        this.track.pps = [new Uint8Array(pps)];\n    }\n\n    parseNAL(unit) {\n        if (!unit) return false;\n\n        let push = false;\n        switch (unit.type()) {\n            case NALU.NDR:\n                push = true;\n                break;\n            case NALU.IDR:\n                push = true;\n                break;\n            case NALU.PPS:\n                if (!this.track.pps) {\n                    this.parsePPS(unit.getData().subarray(4));\n                    if (!this.remuxer.readyToDecode && this.track.pps && this.track.sps) {\n                        this.remuxer.readyToDecode = true;\n                    }\n                }\n                push = true;\n                break;\n            case NALU.SPS:\n                if (!this.track.sps) {\n                    this.parseSPS(unit.getData().subarray(4));\n                    if (!this.remuxer.readyToDecode && this.track.pps && this.track.sps) {\n                        this.remuxer.readyToDecode = true;\n                    }\n                }\n                push = true;\n                break;\n            case NALU.AUD:\n                debug.log('AUD - ignoing and disable HD mode for live channel');\n                if (this.remuxer.isHDAvail) {\n                    this.remuxer.isHDAvail = false;\n                }\n                break;\n            case NALU.SEI:\n                debug.log('SEI - ignoing');\n                break;\n            default:\n        }\n        return push;\n    }\n}\n","import * as debug from '../util/debug';\nlet aacHeader;\nexport class AACParser {\n\n    static get codec() {\n        return 'aac';\n    }\n    \n    static get samplingRateMap() {\n        return [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n    }\n\n    static get getAACHeaderData() {\n        return aacHeader;\n    }\n\n    static getHeaderLength(data) {\n        return (data[1] & 0x01 ? 7 : 9);  // without CRC 7 and with CRC 9 Refs: https://wiki.multimedia.cx/index.php?title=ADTS\n    }\n\n    static getFrameLength(data) {\n        return ((data[3] & 0x03) << 11) | (data[4] << 3) | ((data[5] & 0xE0) >>> 5); // 13 bits length ref: https://wiki.multimedia.cx/index.php?title=ADTS\n    }\n\n    static isAACPattern (data) {\n        return data[0] === 0xff && (data[1] & 0xf0) === 0xf0 && (data[1] & 0x06) === 0x00;\n    }\n\n    static extractAAC(buffer) {\n        let i = 0,\n            length = buffer.byteLength,\n            result = [],\n            headerLength,\n            frameLength;\n\n        if (!AACParser.isAACPattern(buffer)) {\n            debug.error('Invalid ADTS audio format');\n            return result;\n        }\n        headerLength = AACParser.getHeaderLength(buffer);\n        if (!aacHeader) {\n            aacHeader = buffer.subarray(0, headerLength);\n        }\n\n        while (i < length) {\n            frameLength = AACParser.getFrameLength(buffer);\n            result.push(buffer.subarray(headerLength, frameLength));\n            buffer = buffer.slice(frameLength);\n            i += frameLength;\n        }\n        return result;\n    }\n\n    constructor(remuxer) {\n        this.remuxer = remuxer;\n        this.track = remuxer.mp4track;\n    }\n\n    setAACConfig() {\n        let objectType,\n            sampleIndex,\n            channelCount,\n            config = new Uint8Array(2),\n            headerData = AACParser.getAACHeaderData;\n\n        if (!headerData) return;\n            \n        objectType = ((headerData[2] & 0xC0) >>> 6) + 1;\n        sampleIndex = ((headerData[2] & 0x3C) >>> 2);\n        channelCount = ((headerData[2] & 0x01) << 2);\n        channelCount |= ((headerData[3] & 0xC0) >>> 6);\n\n        /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config */\n        config[0] = objectType << 3;\n        config[0] |= (sampleIndex & 0x0E) >> 1;\n        config[1] |= (sampleIndex & 0x01) << 7;\n        config[1] |= channelCount << 3;\n\n        this.track.codec = 'mp4a.40.' + objectType;\n        this.track.channelCount = channelCount;\n        this.track.config = config;\n        this.remuxer.readyToDecode = true;\n    }\n}\n","import * as debug from '../util/debug';\nlet aacHeader;\nexport class OpusParser {\n\n    static get codec() {\n        return 'opus';\n    }\n\n    static extractOpus(buffer) {\n        /*let i = 0,\n            length = buffer.byteLength,\n            result = [],\n            headerLength,\n            frameLength;\n\n        if (!AACParser.isAACPattern(buffer)) {\n            debug.error('Invalid ADTS audio format');\n            return result;\n        }\n        headerLength = AACParser.getHeaderLength(buffer);\n        if (!aacHeader) {\n            aacHeader = buffer.subarray(0, headerLength);\n        }\n\n        while (i < length) {\n            frameLength = AACParser.getFrameLength(buffer);\n            result.push(buffer.subarray(headerLength, frameLength));\n            buffer = buffer.slice(frameLength);\n            i += frameLength;\n        }*/\n        return [ buffer ];\n    }\n\n    constructor(remuxer) {\n        this.remuxer = remuxer;\n        this.track = remuxer.mp4track;\n    }\n\n    setOpusConfig() {\n        /*let objectType,\n            sampleIndex,\n            channelCount,\n            config = new Uint8Array(2),\n            headerData = AACParser.getAACHeaderData;\n\n        if (!headerData) return;\n            \n        objectType = ((headerData[2] & 0xC0) >>> 6) + 1;\n        sampleIndex = ((headerData[2] & 0x3C) >>> 2);\n        channelCount = ((headerData[2] & 0x01) << 2);\n        channelCount |= ((headerData[3] & 0xC0) >>> 6);\n\n        config[0] = objectType << 3;\n        config[0] |= (sampleIndex & 0x0E) >> 1;\n        config[1] |= (sampleIndex & 0x01) << 7;\n        config[1] |= channelCount << 3;*/\n\n        this.track.codec = 'opus';\n        this.track.channelCount = 1;\n        this.track.audiosamplerate = 44100;\n        //this.track.config = config;\n        this.remuxer.readyToDecode = true;\n    }\n}\n","export default class Event {\n    constructor(type) {\n        this.listener = {};\n        this.type = type | '';\n    }\n\n    on(event, fn) {\n        if (!this.listener[event]) {\n            this.listener[event] = [];\n        }\n        this.listener[event].push(fn);\n        return true;\n    }\n\n    off(event, fn) {\n        if (this.listener[event]) {\n            var index = this.listener[event].indexOf(fn);\n            if (index > -1) {\n                this.listener[event].splice(index, 1);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    offAll() {\n        this.listener = {};\n    }\n\n    dispatch(event, data) {\n        if (this.listener[event]) {\n            this.listener[event].map((each) => {\n                each.apply(null, [data]);\n            });\n            return true;\n        }\n        return false;\n    }\n}\n","import * as debug from '../util/debug';\n\n/**\n * Generate MP4 Box\n * taken from: https://github.com/dailymotion/hls.js\n */\n\nexport class MP4 {\n    static init() {\n        MP4.types = {\n            avc1: [], // codingname\n            avcC: [],\n            btrt: [],\n            dinf: [],\n            dref: [],\n            esds: [],\n            ftyp: [],\n            hdlr: [],\n            mdat: [],\n            mdhd: [],\n            mdia: [],\n            mfhd: [],\n            minf: [],\n            moof: [],\n            moov: [],\n            mp4a: [],\n            Opus: [],\n            dOps: [],\n            mvex: [],\n            mvhd: [],\n            sdtp: [],\n            stbl: [],\n            stco: [],\n            stsc: [],\n            stsd: [],\n            stsz: [],\n            stts: [],\n            tfdt: [],\n            tfhd: [],\n            traf: [],\n            trak: [],\n            trun: [],\n            trex: [],\n            tkhd: [],\n            vmhd: [],\n            smhd: [],\n        };\n\n        var i;\n        for (i in MP4.types) {\n            if (MP4.types.hasOwnProperty(i)) {\n                MP4.types[i] = [\n                    i.charCodeAt(0),\n                    i.charCodeAt(1),\n                    i.charCodeAt(2),\n                    i.charCodeAt(3),\n                ];\n            }\n        }\n\n        var videoHdlr = new Uint8Array([\n            0x00, // version 0\n            0x00, 0x00, 0x00, // flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x56, 0x69, 0x64, 0x65,\n            0x6f, 0x48, 0x61, 0x6e,\n            0x64, 0x6c, 0x65, 0x72, 0x00, // name: 'VideoHandler'\n        ]);\n\n        var audioHdlr = new Uint8Array([\n            0x00, // version 0\n            0x00, 0x00, 0x00, // flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x53, 0x6f, 0x75, 0x6e,\n            0x64, 0x48, 0x61, 0x6e,\n            0x64, 0x6c, 0x65, 0x72, 0x00, // name: 'SoundHandler'\n        ]);\n\n        MP4.HDLR_TYPES = {\n            video: videoHdlr,\n            audio: audioHdlr,\n        };\n\n        var dref = new Uint8Array([\n            0x00, // version 0\n            0x00, 0x00, 0x00, // flags\n            0x00, 0x00, 0x00, 0x01, // entry_count\n            0x00, 0x00, 0x00, 0x0c, // entry_size\n            0x75, 0x72, 0x6c, 0x20, // 'url' type\n            0x00, // version 0\n            0x00, 0x00, 0x01, // entry_flags\n        ]);\n\n        var stco = new Uint8Array([\n            0x00, // version\n            0x00, 0x00, 0x00, // flags\n            0x00, 0x00, 0x00, 0x00, // entry_count\n        ]);\n\n        MP4.STTS = MP4.STSC = MP4.STCO = stco;\n\n        MP4.STSZ = new Uint8Array([\n            0x00, // version\n            0x00, 0x00, 0x00, // flags\n            0x00, 0x00, 0x00, 0x00, // sample_size\n            0x00, 0x00, 0x00, 0x00, // sample_count\n        ]);\n        MP4.VMHD = new Uint8Array([\n            0x00, // version\n            0x00, 0x00, 0x01, // flags\n            0x00, 0x00, // graphicsmode\n            0x00, 0x00,\n            0x00, 0x00,\n            0x00, 0x00, // opcolor\n        ]);\n        MP4.SMHD = new Uint8Array([\n            0x00, // version\n            0x00, 0x00, 0x00, // flags\n            0x00, 0x00, // balance\n            0x00, 0x00, // reserved\n        ]);\n\n        MP4.STSD = new Uint8Array([\n            0x00, // version 0\n            0x00, 0x00, 0x00, // flags\n            0x00, 0x00, 0x00, 0x01]);// entry_count\n\n        var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n        var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n        var minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n        MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\n        MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n    }\n\n    static box(type, ...payload) {\n        var size = 8,\n            i = payload.length,\n            len = i,\n            result;\n        // calculate the total size we need to allocate\n        while (i--) {\n            size += payload[i].byteLength;\n        }\n        result = new Uint8Array(size);\n        result[0] = (size >> 24) & 0xff;\n        result[1] = (size >> 16) & 0xff;\n        result[2] = (size >> 8) & 0xff;\n        result[3] = size & 0xff;\n        result.set(type, 4);\n        // copy the payload into the result\n        for (i = 0, size = 8; i < len; ++i) {\n            // copy payload[i] array @ offset size\n            result.set(payload[i], size);\n            size += payload[i].byteLength;\n        }\n        return result;\n    }\n\n    static hdlr(type) {\n        return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n    }\n\n    static mdat(data) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n\n    static mdhd(timescale, duration) {\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\n            0x00, // version 0\n            0x00, 0x00, 0x00, // flags\n            0x00, 0x00, 0x00, 0x02, // creation_time\n            0x00, 0x00, 0x00, 0x03, // modification_time\n            (timescale >> 24) & 0xFF,\n            (timescale >> 16) & 0xFF,\n            (timescale >> 8) & 0xFF,\n            timescale & 0xFF, // timescale\n            (duration >> 24),\n            (duration >> 16) & 0xFF,\n            (duration >> 8) & 0xFF,\n            duration & 0xFF, // duration\n            0x55, 0xc4, // 'und' language (undetermined)\n            0x00, 0x00,\n        ]));\n    }\n\n    static mdia(track) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));\n    }\n\n    static mfhd(sequenceNumber) {\n        return MP4.box(MP4.types.mfhd, new Uint8Array([\n            0x00,\n            0x00, 0x00, 0x00, // flags\n            (sequenceNumber >> 24),\n            (sequenceNumber >> 16) & 0xFF,\n            (sequenceNumber >> 8) & 0xFF,\n            sequenceNumber & 0xFF, // sequence_number\n        ]));\n    }\n\n    static minf(track) {\n        if (track.type === 'audio') {\n            return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\n        } else {\n            return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\n        }\n    }\n\n    static moof(sn, baseMediaDecodeTime, track) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\n    }\n    /**\n     * @param tracks... (optional) {array} the tracks associated with this movie\n     */\n    static moov(tracks, duration, timescale) {\n        var\n            i = tracks.length,\n            boxes = [];\n\n        while (i--) {\n            boxes[i] = MP4.trak(tracks[i]);\n        }\n\n        return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(timescale, duration)].concat(boxes).concat(MP4.mvex(tracks)));\n    }\n\n    static mvex(tracks) {\n        var\n            i = tracks.length,\n            boxes = [];\n\n        while (i--) {\n            boxes[i] = MP4.trex(tracks[i]);\n        }\n        return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\n    }\n\n    static mvhd(timescale, duration) {\n        var\n            bytes = new Uint8Array([\n                0x00, // version 0\n                0x00, 0x00, 0x00, // flags\n                0x00, 0x00, 0x00, 0x01, // creation_time\n                0x00, 0x00, 0x00, 0x02, // modification_time\n                (timescale >> 24) & 0xFF,\n                (timescale >> 16) & 0xFF,\n                (timescale >> 8) & 0xFF,\n                timescale & 0xFF, // timescale\n                (duration >> 24) & 0xFF,\n                (duration >> 16) & 0xFF,\n                (duration >> 8) & 0xFF,\n                duration & 0xFF, // duration\n                0x00, 0x01, 0x00, 0x00, // 1.0 rate\n                0x01, 0x00, // 1.0 volume\n                0x00, 0x00, // reserved\n                0x00, 0x00, 0x00, 0x00, // reserved\n                0x00, 0x00, 0x00, 0x00, // reserved\n                0x00, 0x01, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x01, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00, // pre_defined\n                0xff, 0xff, 0xff, 0xff, // next_track_ID\n            ]);\n        return MP4.box(MP4.types.mvhd, bytes);\n    }\n\n    static sdtp(track) {\n        var\n            samples = track.samples || [],\n            bytes = new Uint8Array(4 + samples.length),\n            flags,\n            i;\n        // leave the full box header (4 bytes) all zero\n        // write the sample table\n        for (i = 0; i < samples.length; i++) {\n            flags = samples[i].flags;\n            bytes[i + 4] = (flags.dependsOn << 4) |\n                (flags.isDependedOn << 2) |\n                (flags.hasRedundancy);\n        }\n\n        return MP4.box(MP4.types.sdtp, bytes);\n    }\n\n    static stbl(track) {\n        return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\n    }\n\n    static avc1(track) {\n        var sps = [],\n            pps = [],\n            i,\n            data,\n            len;\n        // assemble the SPSs\n\n        for (i = 0; i < track.sps.length; i++) {\n            data = track.sps[i];\n            len = data.byteLength;\n            sps.push((len >>> 8) & 0xFF);\n            sps.push((len & 0xFF));\n            sps = sps.concat(Array.prototype.slice.call(data)); // SPS\n        }\n\n        // assemble the PPSs\n        for (i = 0; i < track.pps.length; i++) {\n            data = track.pps[i];\n            len = data.byteLength;\n            pps.push((len >>> 8) & 0xFF);\n            pps.push((len & 0xFF));\n            pps = pps.concat(Array.prototype.slice.call(data));\n        }\n\n        var avcc = MP4.box(MP4.types.avcC, new Uint8Array([\n                0x01,   // version\n                sps[3], // profile\n                sps[4], // profile compat\n                sps[5], // level\n                0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n                0xE0 | track.sps.length, // 3bit reserved (111) + numOfSequenceParameterSets\n            ].concat(sps).concat([\n                track.pps.length, // numOfPictureParameterSets\n            ]).concat(pps))), // \"PPS\"\n            width = track.width,\n            height = track.height;\n        // console.log('avcc:' + Hex.hexDump(avcc));\n        return MP4.box(MP4.types.avc1, new Uint8Array([\n            0x00, 0x00, 0x00, // reserved\n            0x00, 0x00, 0x00, // reserved\n            0x00, 0x01, // data_reference_index\n            0x00, 0x00, // pre_defined\n            0x00, 0x00, // reserved\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            (width >> 8) & 0xFF,\n            width & 0xff, // width\n            (height >> 8) & 0xFF,\n            height & 0xff, // height\n            0x00, 0x48, 0x00, 0x00, // horizresolution\n            0x00, 0x48, 0x00, 0x00, // vertresolution\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x00, 0x01, // frame_count\n            0x12,\n            0x62, 0x69, 0x6E, 0x65, // binelpro.ru\n            0x6C, 0x70, 0x72, 0x6F,\n            0x2E, 0x72, 0x75, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, // compressorname\n            0x00, 0x18,   // depth = 24\n            0x11, 0x11]), // pre_defined = -1\n        avcc,\n        MP4.box(MP4.types.btrt, new Uint8Array([\n            0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n            0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n            0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\n        );\n    }\n\n    static esds(track) {\n        var configlen = track.config.byteLength;\n        let data = new Uint8Array(26 + configlen + 3);\n        data.set([\n            0x00, // version 0\n            0x00, 0x00, 0x00, // flags\n\n            0x03, // descriptor_type\n            0x17 + configlen, // length\n            0x00, 0x01, // es_id\n            0x00, // stream_priority\n\n            0x04, // descriptor_type\n            0x0f + configlen, // length\n            0x40, // codec : mpeg4_audio\n            0x15, // stream_type\n            0x00, 0x00, 0x00, // buffer_size\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n            0x05, // descriptor_type\n            configlen,\n        ]);\n        data.set(track.config, 26);\n        data.set([0x06, 0x01, 0x02], 26 + configlen);\n        // return new Uint8Array([\n        //     0x00, // version 0\n        //     0x00, 0x00, 0x00, // flags\n        //\n        //     0x03, // descriptor_type\n        //     0x17+configlen, // length\n        //     0x00, 0x01, //es_id\n        //     0x00, // stream_priority\n        //\n        //     0x04, // descriptor_type\n        //     0x0f+configlen, // length\n        //     0x40, //codec : mpeg4_audio\n        //     0x15, // stream_type\n        //     0x00, 0x00, 0x00, // buffer_size\n        //     0x00, 0x00, 0x00, 0x00, // maxBitrate\n        //     0x00, 0x00, 0x00, 0x00, // avgBitrate\n        //\n        //     0x05 // descriptor_type\n        // ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor\n        return data;\n    }\n\n    static mp4a(track) {\n        var audiosamplerate = track.audiosamplerate;\n        return MP4.box(MP4.types.mp4a, new Uint8Array([\n            0x00, 0x00, 0x00, // reserved\n            0x00, 0x00, 0x00, // reserved\n            0x00, 0x01, // data_reference_index\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x00, track.channelCount, // channelcount\n            0x00, 0x10, // sampleSize:16bits\n            0x00, 0x00, // pre_defined\n            0x00, 0x00, // reserved2\n            (audiosamplerate >> 8) & 0xFF,\n            audiosamplerate & 0xff, //\n            0x00, 0x00]),\n        MP4.box(MP4.types.esds, MP4.esds(track)));\n    }\n\n    // https://www.opus-codec.org/docs/opus_in_isobmff.html#4.3.2\n    static opus(track) {\n        var audiosamplerate = track.audiosamplerate;\n        return MP4.box(\n            MP4.types.Opus,\n            new Uint8Array([\n                0x00, 0x00, 0x00, // reserved\n                0x00, 0x00, 0x00, // reserved\n                0x00, 0x01, // data_reference_index\n                0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00, // reserved\n                0x00, track.channelCount, // channelcount\n                0x00, 0x10, // sampleSize:16bits\n                0x00, 0x00, // pre_defined\n                0x00, 0x00, // reserved2\n                (audiosamplerate >> 8) & 0xFF,\n                audiosamplerate & 0xff, //\n                0x00, 0x00]),\n            MP4.dops(track));\n    }\n\n    static dops(track) {\n        var audiosamplerate = track.audiosamplerate;\n        var preskip = audiosamplerate * (80 / 1000.0);\n        return MP4.box(MP4.types.dOps, new Uint8Array([\n            0x00, // version\n            track.channelCount, // output channel count\n            (preskip >> 8) & 0xFF, preskip & 0xff, // preskip\n            0x00, 0x00, (audiosamplerate >> 8) & 0xFF, audiosamplerate & 0xff, // input sample rate\n            0x00, 0x00, // output gain\n            0x00 // channel mapping family\n        ]));\n    }\n\n    static stsd(track) {\n        if (track.type === 'audio') {\n            if (track.codec.startsWith('mp4a')) {\n                return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n            } else if (track.codec.startsWith('opus')) {\n                return MP4.box(MP4.types.stsd, MP4.STSD, MP4.opus(track));\n            } else {\n                debug.error('Unknown track codec ' + track.codec);\n            }\n        } else {\n            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n        }\n    }\n\n    static tkhd(track) {\n        var id = track.id,\n            duration = track.duration,\n            width = track.width,\n            height = track.height,\n            volume = track.volume;\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\n            0x00, // version 0\n            0x00, 0x00, 0x07, // flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            (id >> 24) & 0xFF,\n            (id >> 16) & 0xFF,\n            (id >> 8) & 0xFF,\n            id & 0xFF, // track_ID\n            0x00, 0x00, 0x00, 0x00, // reserved\n            (duration >> 24),\n            (duration >> 16) & 0xFF,\n            (duration >> 8) & 0xFF,\n            duration & 0xFF, // duration\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // reserved\n            0x00, 0x00, // layer\n            0x00, 0x00, // alternate_group\n            (volume >> 0) & 0xff, (((volume % 1) * 10) >> 0) & 0xff, // track volume // FIXME\n            0x00, 0x00, // reserved\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n            (width >> 8) & 0xFF,\n            width & 0xFF,\n            0x00, 0x00, // width\n            (height >> 8) & 0xFF,\n            height & 0xFF,\n            0x00, 0x00, // height\n        ]));\n    }\n\n    static traf(track, baseMediaDecodeTime) {\n        var sampleDependencyTable = MP4.sdtp(track),\n            id = track.id;\n        return MP4.box(MP4.types.traf,\n            MP4.box(MP4.types.tfhd, new Uint8Array([\n                0x00, // version 0\n                0x00, 0x00, 0x00, // flags\n                (id >> 24),\n                (id >> 16) & 0XFF,\n                (id >> 8) & 0XFF,\n                (id & 0xFF), // track_ID\n            ])),\n            MP4.box(MP4.types.tfdt, new Uint8Array([\n                0x00, // version 0\n                0x00, 0x00, 0x00, // flags\n                (baseMediaDecodeTime >> 24),\n                (baseMediaDecodeTime >> 16) & 0XFF,\n                (baseMediaDecodeTime >> 8) & 0XFF,\n                (baseMediaDecodeTime & 0xFF), // baseMediaDecodeTime\n            ])),\n            MP4.trun(track,\n                sampleDependencyTable.length +\n                16 + // tfhd\n                16 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8),  // mdat header\n            sampleDependencyTable);\n    }\n\n    /**\n     * Generate a track box.\n     * @param track {object} a track definition\n     * @return {Uint8Array} the track box\n     */\n    static trak(track) {\n        track.duration = track.duration || 0xffffffff;\n        return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n    }\n\n    static trex(track) {\n        var id = track.id;\n        return MP4.box(MP4.types.trex, new Uint8Array([\n            0x00, // version 0\n            0x00, 0x00, 0x00, // flags\n            (id >> 24),\n            (id >> 16) & 0XFF,\n            (id >> 8) & 0XFF,\n            (id & 0xFF), // track_ID\n            0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\n            0x00, 0x01, 0x00, 0x01, // default_sample_flags\n        ]));\n    }\n\n    static trun(track, offset) {\n        var samples = track.samples || [],\n            len = samples.length,\n            arraylen = 12 + (16 * len),\n            array = new Uint8Array(arraylen),\n            i,\n            sample,\n            duration,\n            size,\n            flags,\n            cts;\n        offset += 8 + arraylen;\n        array.set([\n            0x00, // version 0\n            0x00, 0x0f, 0x01, // flags\n            (len >>> 24) & 0xFF,\n            (len >>> 16) & 0xFF,\n            (len >>> 8) & 0xFF,\n            len & 0xFF, // sample_count\n            (offset >>> 24) & 0xFF,\n            (offset >>> 16) & 0xFF,\n            (offset >>> 8) & 0xFF,\n            offset & 0xFF, // data_offset\n        ], 0);\n        for (i = 0; i < len; i++) {\n            sample = samples[i];\n            duration = sample.duration;\n            size = sample.size;\n            flags = sample.flags;\n            cts = sample.cts;\n            array.set([\n                (duration >>> 24) & 0xFF,\n                (duration >>> 16) & 0xFF,\n                (duration >>> 8) & 0xFF,\n                duration & 0xFF, // sample_duration\n                (size >>> 24) & 0xFF,\n                (size >>> 16) & 0xFF,\n                (size >>> 8) & 0xFF,\n                size & 0xFF, // sample_size\n                (flags.isLeading << 2) | flags.dependsOn,\n                (flags.isDependedOn << 6) |\n                (flags.hasRedundancy << 4) |\n                (flags.paddingValue << 1) |\n                flags.isNonSync,\n                flags.degradPrio & 0xF0 << 8,\n                flags.degradPrio & 0x0F, // sample_flags\n                (cts >>> 24) & 0xFF,\n                (cts >>> 16) & 0xFF,\n                (cts >>> 8) & 0xFF,\n                cts & 0xFF, // sample_composition_time_offset\n            ], 12 + 16 * i);\n        }\n        return MP4.box(MP4.types.trun, array);\n    }\n\n    static initSegment(tracks, duration, timescale) {\n        if (!MP4.types) {\n            MP4.init();\n        }\n        var movie = MP4.moov(tracks, duration, timescale),\n            result;\n        result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\n        result.set(MP4.FTYP);\n        result.set(movie, MP4.FTYP.byteLength);\n        return result;\n    }\n\n    static initSegmentMin(tracks, duration, timescale) {\n        if (!MP4.types) {\n            MP4.init();\n        }\n        let result = new Uint8Array(MP4.FTYP.byteLength);\n        result.set(MP4.FTYP);\n        return result;\n    }\n}\n","import * as debug from '../util/debug';\n\nlet track_id = 1;\nexport class BaseRemuxer {\n\n    static getTrackID() {\n        return track_id++;\n    }\n    \n    constructor() {\n        this.seq = 1;\n    }\n\n    flush() {\n        this.seq++;\n        this.mp4track.len = 0;\n        this.mp4track.samples = [];\n    }\n\n    isReady() {\n        if (!this.readyToDecode || !this.samples.length) return null;\n        return true;\n    }\n}\n","import * as debug from '../util/debug';\nimport { AACParser } from '../parsers/aac.js';\nimport { BaseRemuxer } from './base.js';\n\nexport class AACRemuxer extends BaseRemuxer {\n\n    constructor() {\n        super();\n        this.readyToDecode = false;\n        this.nextDts = 0;\n        this.dts = 0;\n        this.timescale = 1000;\n\n        this.mp4track = {\n            id: BaseRemuxer.getTrackID(),\n            type: 'audio',\n            channelCount: 0,\n            len: 0,\n            fragmented: true,\n            timescale: this.timescale,\n            duration: this.timescale,\n            samples: [],\n            config: '',\n            codec: '',\n        };\n\n        this.samples = [];\n        this.aac = new AACParser(this);\n    }\n\n    resetTrack() {\n        this.readyToDecode = false;\n        this.mp4track.codec = '';\n        this.mp4track.channelCount = '';\n        this.mp4track.config = '';\n        this.mp4track.timescale = this.timescale;\n    }\n\n    remux(samples) {\n        let config,\n            sample,\n            size,\n            payload;\n        for (let sample of samples) {\n            payload = sample.units;\n            size = payload.byteLength;\n            this.samples.push({\n                units: payload,\n                size: size,\n                duration: sample.duration,\n            });\n            this.mp4track.len += size;\n            if (!this.readyToDecode) {\n                this.aac.setAACConfig();\n            }\n        }\n    }\n\n    getPayload() {\n        if (!this.isReady()) {\n            return null;\n        }\n\n        let payload = new Uint8Array(this.mp4track.len);\n        let offset = 0;\n        let samples = this.mp4track.samples;\n        let mp4Sample,\n            duration;\n\n        this.dts = this.nextDts;\n\n        while (this.samples.length) {\n            let sample = this.samples.shift(),\n                units = sample.units;\n\n            duration = sample.duration;\n\n            if (duration <= 0) {\n                debug.log(`remuxer: invalid sample duration at DTS: ${this.nextDts} :${duration}`);\n                this.mp4track.len -= sample.size;\n                continue;\n            }\n\n            this.nextDts += duration;\n            mp4Sample = {\n                size: sample.size,\n                duration: duration,\n                cts: 0,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    dependsOn: 1,\n                },\n            };\n\n            payload.set(sample.units, offset);\n            offset += sample.size;\n            samples.push(mp4Sample);\n        }\n\n        if (!samples.length) return null;\n\n        return new Uint8Array(payload.buffer, 0, this.mp4track.len);\n    }\n}\n","import * as debug from '../util/debug';\nimport { OpusParser } from '../parsers/opus';\nimport { BaseRemuxer } from './base.js';\n\nexport class OpusRemuxer extends BaseRemuxer {\n\n    constructor() {\n        super();\n        this.readyToDecode = false;\n        this.nextDts = 0;\n        this.dts = 0;\n        this.timescale = 1000;\n\n        this.mp4track = {\n            id: BaseRemuxer.getTrackID(),\n            type: 'audio',\n            channelCount: 0,\n            len: 0,\n            fragmented: true,\n            timescale: this.timescale,\n            duration: this.timescale,\n            samples: [],\n            config: '',\n            codec: '',\n        };\n\n        this.samples = [];\n        this.opus = new OpusParser(this);\n    }\n\n    resetTrack() {\n        this.readyToDecode = false;\n        this.mp4track.codec = '';\n        this.mp4track.channelCount = '';\n        this.mp4track.config = '';\n        this.mp4track.timescale = this.timescale;\n    }\n\n    remux(samples) {\n        let config,\n            sample,\n            size,\n            payload;\n        for (let sample of samples) {\n            payload = sample.units;\n            size = payload.byteLength;\n            this.samples.push({\n                units: payload,\n                size: size,\n                duration: sample.duration,\n            });\n            this.mp4track.len += size;\n            if (!this.readyToDecode) {\n                this.opus.setOpusConfig();\n            }\n        }\n    }\n\n    getPayload() {\n        if (!this.isReady()) {\n            return null;\n        }\n\n        let payload = new Uint8Array(this.mp4track.len);\n        let offset = 0;\n        let samples = this.mp4track.samples;\n        let mp4Sample,\n            duration;\n\n        this.dts = this.nextDts;\n\n        while (this.samples.length) {\n            let sample = this.samples.shift(),\n                units = sample.units;\n\n            duration = sample.duration;\n\n            if (duration <= 0) {\n                debug.log(`remuxer: invalid sample duration at DTS: ${this.nextDts} :${duration}`);\n                this.mp4track.len -= sample.size;\n                continue;\n            }\n\n            this.nextDts += duration;\n            mp4Sample = {\n                size: sample.size,\n                duration: duration,\n                cts: 0,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    dependsOn: 1,\n                },\n            };\n\n            payload.set(sample.units, offset);\n            offset += sample.size;\n            samples.push(mp4Sample);\n        }\n\n        if (!samples.length) return null;\n\n        return new Uint8Array(payload.buffer, 0, this.mp4track.len);\n    }\n}\n","import * as debug from '../util/debug';\nimport { H264Parser } from '../parsers/h264.js';\nimport { BaseRemuxer } from './base.js';\n\nexport class H264Remuxer extends BaseRemuxer {\n\n    constructor() {\n        super();\n        this.readyToDecode = false;\n        this.nextDts = 0;\n        this.dts = 0;\n        this.timescale = 1000;\n\n        this.mp4track = {\n            id: BaseRemuxer.getTrackID(),\n            type: 'video',\n            len: 0,\n            fragmented: true,\n            sps: '',\n            pps: '',\n            width: 0,\n            height: 0,\n            timescale: this.timescale,\n            duration: this.timescale,\n            samples: [],\n        };\n\n        this.samples = [];\n        this.h264 = new H264Parser(this);\n    }\n\n    resetTrack() {\n        this.readyToDecode = false;\n        this.mp4track.sps = '';\n        this.mp4track.pps = '';\n    }\n\n    remux(samples) {\n        let sample,\n            units,\n            unit,\n            size,\n            keyFrame;\n        for (sample of samples) {\n            units = [];\n            size = 0;\n            keyFrame = false;\n            for (unit of sample.units) {\n                if (this.h264.parseNAL(unit)) {\n                    units.push(unit);\n                    size += unit.getSize();\n                    if (!keyFrame) {\n                        keyFrame = unit.isKeyframe();\n                    }\n                }\n            }\n\n            if (units.length > 0 && this.readyToDecode) {\n                this.mp4track.len += size;\n                this.samples.push({\n                    units: units,\n                    size: size,\n                    keyFrame: keyFrame,\n                    duration: sample.duration,\n                });\n            }\n        }\n    }\n\n    getPayload() {\n        if (!this.isReady()) {\n            return null;\n        }\n\n        let payload = new Uint8Array(this.mp4track.len);\n        let offset = 0;\n        let samples = this.mp4track.samples;\n        let mp4Sample,\n            duration;\n\n        this.dts = this.nextDts;\n\n        while (this.samples.length) {\n            let sample = this.samples.shift(),\n                units = sample.units;\n\n            duration = sample.duration;\n\n            if (duration <= 0) {\n                debug.log(`remuxer: invalid sample duration at DTS: ${this.nextDts} :${duration}`);\n                this.mp4track.len -= sample.size;\n                continue;\n            }\n\n            this.nextDts += duration;\n            mp4Sample = {\n                size: sample.size,\n                duration: duration,\n                cts: 0,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    isNonSync: sample.keyFrame ? 0 : 1,\n                    dependsOn: sample.keyFrame ? 2 : 1,\n                },\n            };\n\n            for (const unit of units) {\n                payload.set(unit.getData(), offset);\n                offset += unit.getSize();\n            }\n\n            samples.push(mp4Sample);\n        }\n\n        if (!samples.length) return null;\n\n        return new Uint8Array(payload.buffer, 0, this.mp4track.len);\n    }\n}\n","export function appendByteArray(buffer1, buffer2, buffer3) {\n    let length = (buffer1.byteLength|0) + (buffer2.byteLength|0);\n    if (buffer3) {\n        length += (buffer3.byteLength|0);\n    }\n    let tmp = new Uint8Array(length);\n    tmp.set(buffer1, 0);\n    tmp.set(buffer2, buffer1.byteLength|0);\n    if (buffer3) {\n        tmp.set(buffer3, (buffer1.byteLength|0) + (buffer2.byteLength|0));\n    }\n    return tmp;\n}\n\nexport function secToTime(sec) {\n    let seconds,\n        hours,\n        minutes,\n        result = '';\n\n    seconds = Math.floor(sec);\n    hours = parseInt(seconds / 3600, 10) % 24;\n    minutes = parseInt(seconds / 60, 10) % 60;\n    seconds = (seconds < 0) ? 0 : seconds % 60;\n\n    if (hours > 0) {\n        result += (hours < 10 ? '0' + hours : hours) + ':';\n    }\n    result += (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n    return result;\n}\n","import * as debug from '../util/debug';\nimport { MP4 } from '../util/mp4-generator.js';\nimport { AACParser } from '../parsers/aac.js';\nimport { OpusParser } from '../parsers/opus.js';\nimport { AACRemuxer } from '../remuxer/aac.js';\nimport { OpusRemuxer } from '../remuxer/opus.js';\nimport { H264Remuxer } from '../remuxer/h264.js';\nimport { appendByteArray, secToTime } from '../util/utils.js';\nimport Event from '../util/event';\n\nexport default class RemuxController extends Event {\n\n    constructor(streaming, mp4Type) {\n        super('remuxer');\n        this.initialized = false;\n        this.trackTypes = [];\n        this.tracks = {};\n        this.mediaDuration = streaming ? Infinity : 1000;\n        this.mp4Type = mp4Type;\n    }\n\n    addTrack(type, audioCodec) {\n        if (type === 'video' || type === 'both') {\n            this.tracks.video = new H264Remuxer();\n            this.trackTypes.push('video');\n        }\n        if (type === 'audio' || type === 'both') {\n            if (audioCodec === AACParser.codec) {\n                this.tracks.audio = new AACRemuxer();\n                this.trackTypes.push('audio');\n            } else if (audioCodec === OpusParser.codec) {\n                this.tracks.audio = new OpusRemuxer();\n                this.trackTypes.push('audio');\n            } else {\n                debug.error('Unknown audio codev audioCodec');\n            }\n        }\n    }\n\n    reset() {\n        for (let type of this.trackTypes) {\n            this.tracks[type].resetTrack();\n        }\n        this.initialized = false;\n    }\n\n    destroy() {\n        this.tracks = {};\n        this.offAll();\n    }\n\n    flush() {\n        if (this.mp4Type === 'fragmented' || this.mp4Type === 'combined') {\n            if (!this.initialized) {\n                if (this.isReady()) {\n                    this.dispatch('ready');\n\n                    if (this.mp4Type === 'fragmented') {\n                        for (let type of this.trackTypes) { \n                            let track = this.tracks[type];\n                            let data = {\n                                type: type,\n                                payload: MP4.initSegment([track.mp4track], this.mediaDuration, track.mp4track.timescale),\n                            };\n                            this.dispatch('buffer', data);\n                        }\n                    } else {\n                        let allTracks = [];\n                        for (let type of this.trackTypes) { \n                            let track = this.tracks[type];\n                            allTracks.push(track.mp4track);\n                        }\n                        let data = {\n                            type: 'both',\n                            payload: MP4.initSegment(allTracks, this.mediaDuration, allTracks[0].timescale),\n                        };\n                        this.dispatch('buffer', data);\n                    }\n                    debug.log('Initial segment generated.');\n                    this.initialized = true;\n                }\n            } else {\n                for (let type of this.trackTypes) {\n                    let track = this.tracks[type];\n                    let pay = track.getPayload();\n                    if (pay && pay.byteLength) {\n                        const moof = MP4.moof(track.seq, track.dts, track.mp4track);\n                        const mdat = MP4.mdat(pay);\n                        let payload = appendByteArray(moof, mdat);\n                        let data = {\n                            type: type,\n                            payload: payload,\n                            dts: track.dts\n                        };\n                        this.dispatch('buffer', data);\n                        let duration = secToTime(track.dts / 1000);\n                        debug.log(`put segment (${type}): ${track.seq} dts: ${track.dts} samples: ${track.mp4track.samples.length} second: ${duration}`);\n                        track.flush();\n                    }\n                }\n            }\n        } else if (this.mp4Type === 'single') {\n            let allTracks = [];\n            for (let type of this.trackTypes) {\n                allTracks.push(this.tracks[type].mp4track);\n            }\n\n            var trackPayload;\n            var payload;\n            \n            let initSegment = MP4.initSegmentMin(\n                allTracks,\n                this.mediaDuration,\n                allTracks[0].timescale);\n\n            for (let type of this.trackTypes) {\n                let track = this.tracks[type];\n\n                trackPayload = MP4.mdat(track.getPayload());\n                if (!payload) {\n                    payload = trackPayload;\n                } else {\n                    payload = appendByteArray(payload, trackPayload);\n                }\n            }\n\n            let moov = MP4.moov(allTracks, this.mediaDuration, allTracks[0].timescale);\n            let data = {\n                payload: appendByteArray(\n                    initSegment,\n                    payload,\n                    moov)\n            };\n\n            this.dispatch('buffer', data);\n        } else {\n            debug.error('Unknown mp4 type ' + this.mp4Type);\n        }\n    }\n\n    isReady() {\n        for (let type of this.trackTypes) {\n            if (!this.tracks[type].readyToDecode || !this.tracks[type].samples.length) return false;\n        }\n        return true;\n    }\n\n    remux(data) {\n        for (let type of this.trackTypes) {\n            let samples = data[type];\n            if (type === 'audio' && this.tracks.video && !this.tracks.video.readyToDecode) continue; /* if video is present, don't add audio until video get ready */\n            if (samples.length > 0) {\n                this.tracks[type].remux(samples);\n            }\n        }\n        this.flush();\n    }\n}\n","import * as debug from '../util/debug';\nimport Event from '../util/event';\nimport { appendByteArray } from '../util/utils.js';\n\nexport default class BufferController extends Event {\n    constructor(sourceBuffer, type) {\n        super('buffer');\n\n        this.type = type;\n        this.queue = new Uint8Array();\n\n        this.cleaning = false;\n        this.pendingCleaning = 0;\n        this.cleanOffset = 30;\n        this.cleanRanges = [];\n\n        this.sourceBuffer = sourceBuffer;\n        this.sourceBuffer.addEventListener('updateend', ()=> {\n            if (this.pendingCleaning > 0) {\n                this.initCleanup(this.pendingCleaning);\n                this.pendingCleaning = 0;\n            }\n            this.cleaning = false;\n            if (this.cleanRanges.length) {\n                this.doCleanup();\n                return;\n            }\n        });\n\n        this.sourceBuffer.addEventListener('error', ()=> {\n            this.dispatch('error', { type: this.type, name: 'buffer', error: 'buffer error' });\n        });\n    }\n\n    destroy() {\n        this.queue = null;\n        this.sourceBuffer = null;\n        this.offAll();\n    }\n\n    doCleanup() {\n        if (!this.cleanRanges.length) {\n            this.cleaning = false;\n            return;\n        }\n        let range = this.cleanRanges.shift();\n        debug.log(`${this.type} remove range [${range[0]} - ${range[1]})`);\n        this.cleaning = true;\n        this.sourceBuffer.remove(range[0], range[1]);\n    }\n\n    initCleanup(cleanMaxLimit) {\n        if (this.sourceBuffer.updating) {\n            this.pendingCleaning = cleanMaxLimit;\n            return;\n        }\n        if (this.sourceBuffer.buffered && this.sourceBuffer.buffered.length && !this.cleaning) {\n            for (let i = 0; i < this.sourceBuffer.buffered.length; ++i) {\n                let start = this.sourceBuffer.buffered.start(i);\n                let end = this.sourceBuffer.buffered.end(i);\n\n                if ((cleanMaxLimit - start) > this.cleanOffset) {\n                    end = cleanMaxLimit - this.cleanOffset;\n                    if (start < end) {\n                        this.cleanRanges.push([start, end]);\n                    }\n                }\n            }\n            this.doCleanup();\n        }\n    }\n\n    doAppend() {\n        if (!this.queue.length) return;\n\n        if (this.sourceBuffer.updating) {\n            return;\n        }\n\n        try {\n            this.sourceBuffer.appendBuffer(this.queue);\n            this.queue = new Uint8Array();\n        } catch (e) {\n            if (e.name === 'QuotaExceededError') {\n                debug.log(`${this.type} buffer quota full`);\n                this.dispatch('error', { type: this.type, name: 'QuotaExceeded', error: 'buffer error' });\n                return;\n            }\n            debug.error(`Error occured while appending ${this.type} buffer -  ${e.name}: ${e.message}`);\n            this.dispatch('error', { type: this.type, name: 'unexpectedError', error: 'buffer error' });\n        }\n    }\n\n    feed(data) {\n        this.queue = appendByteArray(this.queue, data);\n    }\n}\n","import * as debug from './util/debug';\nimport { NALU } from './util/nalu.js';\nimport { H264Parser } from './parsers/h264.js';\nimport { AACParser } from './parsers/aac.js';\nimport { OpusParser } from './parsers/opus.js';\nimport Event from './util/event';\nimport RemuxController from './controller/remux.js';\nimport BufferController from './controller/buffer.js';\n\nwindow.MediaSource = window.MediaSource || window.WebKitMediaSource;\n\nexport default class JMuxmer extends Event {\n\n    static isSupported(codec) {\n        return (window.MediaSource && window.MediaSource.isTypeSupported(codec));\n    }\n\n    constructor(options) {\n        super('jmuxer');\n        window.MediaSource = window.MediaSource || window.WebKitMediaSource;\n\n        let defaults = {\n            node: '',\n            mode: 'both', // both, audio, video\n            flushingTime: 1500,\n            clearBuffer: true,\n            onReady: null, // function called when MSE is ready to accept frames\n            fps: 30,\n            debug: false,\n            audioCodec: AACParser.codec,\n            onData: undefined,\n            mp4Type: 'fragmented'\n        };\n        this.options = Object.assign({}, defaults, options);\n\n        if (this.options.debug) {\n            debug.setLogger();\n        }\n\n        if (typeof this.options.node === 'string' && this.options.node == '') {\n            debug.error('no video element were found to render, provide a valid video element');\n        }\n\n        if (!this.options.fps) {\n            this.options.fps = 30;\n        }\n        this.frameDuration = (1000 / this.options.fps) | 0;\n\n        this.node = typeof this.options.node === 'string' ? document.getElementById(this.options.node) : this.options.node;\n    \n        this.sourceBuffers = {};\n        this.isMSESupported = !!window.MediaSource;\n       \n        if (!this.isMSESupported) {\n            throw 'Oops! Browser does not support media source extension.';\n        }\n\n        this.setupMSE();\n        this.remuxController = new RemuxController(this.options.clearBuffer, this.options.mp4Type); \n        this.remuxController.addTrack(this.options.mode, this.options.audioCodec);\n        \n\n        this.mseReady = false;\n        this.lastCleaningTime = Date.now();\n        this.keyframeCache = [];\n        this.frameCounter  = 0;\n\n        /* events callback */\n        this.remuxController.on('buffer', this.onBuffer.bind(this));\n        this.remuxController.on('ready', this.createBuffer.bind(this));\n        this.startInterval();\n    }\n\n    setupMSE() {\n        this.mediaSource = new MediaSource();\n        this.node.src = URL.createObjectURL(this.mediaSource);\n        this.mediaSource.addEventListener('sourceopen', this.onMSEOpen.bind(this));\n        this.mediaSource.addEventListener('sourceclose', this.onMSEClose.bind(this));\n        this.mediaSource.addEventListener('webkitsourceopen', this.onMSEOpen.bind(this));\n        this.mediaSource.addEventListener('webkitsourceclose', this.onMSEClose.bind(this));\n    }\n\n    feed(data) {\n        let remux = false,\n            nalus,\n            aacFrames,\n            duration,\n            chunks = {\n                video: [],\n                audio: []\n            };\n\n        if (!data || !this.remuxController) return;\n        duration = data.duration ? parseInt(data.duration) : 0;\n        if (data.video) {  \n            nalus = H264Parser.extractNALu(data.video);\n            if (nalus.length > 0) {\n                chunks.video = this.getVideoFrames(nalus, duration);\n                remux = true;\n            }\n        }\n        if (data.audio) {\n            var frames = [];\n            if (this.options.audioCodec === AACParser.codec) {\n                frames = AACParser.extractAAC(data.audio);\n            } else if (this.options.audioCodec === OpusParser.codec) {\n                frames = OpusParser.extractOpus(data.audio);\n            }\n            if (frames.length > 0) {\n                chunks.audio = this.getAudioFrames(frames, duration);\n                remux = true;\n            }\n        }\n        if (!remux) {\n            debug.error('Input object must have video and/or audio property. Make sure it is not empty and valid typed array');\n            return;\n        }\n        this.remuxController.remux(chunks);\n    }\n\n    getVideoFrames(nalus, duration) {\n        let nalu,\n            units = [],\n            samples = [],\n            naluObj,\n            sampleDuration,\n            adjustDuration = 0,\n            numberOfFrames = [];\n\n        for (nalu of nalus) {\n            naluObj = new NALU(nalu);\n            units.push(naluObj);\n            if (naluObj.type() === NALU.IDR || naluObj.type() === NALU.NDR) {\n                samples.push({units});\n                units = [];\n                if (this.options.clearBuffer) {\n                    if (naluObj.type() === NALU.IDR) {\n                        numberOfFrames.push(this.frameCounter);\n                    }\n                    this.frameCounter++;\n                }\n            }\n        }\n        \n        if (duration) {\n            sampleDuration = duration / samples.length | 0;\n            adjustDuration = (duration - (sampleDuration * samples.length));\n        } else {\n            sampleDuration = this.frameDuration;\n        }\n        samples.map((sample) => {\n            sample.duration = adjustDuration > 0 ? (sampleDuration + 1) : sampleDuration;\n            if (adjustDuration !== 0) {\n                adjustDuration--;\n            }\n        });\n\n        /* cache keyframe times if clearBuffer set true */\n        if (this.options.clearBuffer) {\n            numberOfFrames = numberOfFrames.map((total) => {\n                return (total * sampleDuration) / 1000;\n            });\n            this.keyframeCache = this.keyframeCache.concat(numberOfFrames);\n        }\n        return samples;\n    }\n\n    getAudioFrames(aacFrames, duration) {\n        let samples = [],\n            units,\n            sampleDuration,\n            adjustDuration = 0;\n\n        for (units of aacFrames) {\n            samples.push({units});\n        }\n\n        if (duration) {\n            sampleDuration = duration / samples.length | 0;\n            adjustDuration = (duration - (sampleDuration * samples.length));\n        } else {\n            sampleDuration = this.frameDuration;\n        }\n        samples.map((sample) => {\n            sample.duration = adjustDuration > 0 ? (sampleDuration + 1) : sampleDuration;\n            if (adjustDuration !== 0) {\n                adjustDuration--;\n            }\n        });\n        return samples;\n    }\n\n    destroy() {\n        this.stopInterval();\n        if (this.mediaSource) {\n            try {\n                if (this.bufferControllers) {\n                    this.mediaSource.endOfStream();\n                }\n            } catch (e) {\n                debug.error(`mediasource is not available to end ${e.message}`);\n            }\n            this.mediaSource = null;\n        }\n        if (this.remuxController) {\n            this.remuxController.destroy();\n            this.remuxController = null;\n        }\n        if (this.bufferControllers) {\n            for (let type in this.bufferControllers) {\n                this.bufferControllers[type].destroy();\n            }\n            this.bufferControllers = null;\n        }\n        this.node = false;\n        this.mseReady = false;\n        this.videoStarted = false;\n    }\n\n    createBuffer() {\n        if (!this.mseReady || !this.remuxController || !this.remuxController.isReady() || this.bufferControllers) return;\n        this.bufferControllers = {};\n        for (let type in this.remuxController.tracks) {\n            let track = this.remuxController.tracks[type];\n            if (!JMuxmer.isSupported(`${type}/mp4; codecs=\"${track.mp4track.codec}\"`)) {\n                debug.error('Browser does not support codec');\n                return false;\n            }\n            let sb = this.mediaSource.addSourceBuffer(`${type}/mp4; codecs=\"${track.mp4track.codec}\"`);\n            this.bufferControllers[type] = new BufferController(sb, type);\n            this.sourceBuffers[type] = sb;\n            this.bufferControllers[type].on('error', this.onBufferError.bind(this));\n        }\n    }\n\n    startInterval() {\n\n        this.interval = setInterval(()=>{\n            if (this.bufferControllers) {\n                this.releaseBuffer();\n                this.clearBuffer();\n            }\n        }, this.options.flushingTime);\n    }\n\n    stopInterval() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    releaseBuffer() {\n        for (let type in this.bufferControllers) {\n            this.bufferControllers[type].doAppend();\n        }\n    }\n\n    getSafeBufferClearLimit(offset) {\n        let maxLimit = (this.options.mode === 'audio' && offset) || 0,\n            adjacentOffset;\n\n        for (let i = 0; i < this.keyframeCache.length; i++) {\n            if (this.keyframeCache[i] >= offset) {\n                break;\n            }\n            adjacentOffset = this.keyframeCache[i];\n        }\n\n        if (adjacentOffset) {\n            this.keyframeCache = this.keyframeCache.filter( keyframePoint => {\n                if (keyframePoint < adjacentOffset) {\n                    maxLimit = keyframePoint;\n                }\n                return keyframePoint >= adjacentOffset;\n            });\n        }\n        \n        return maxLimit;\n    }\n\n    clearBuffer() {\n        if (this.options.clearBuffer && (Date.now() - this.lastCleaningTime) > 10000) {\n            for (let type in this.bufferControllers) {\n                let cleanMaxLimit = this.getSafeBufferClearLimit(this.node.currentTime);\n                this.bufferControllers[type].initCleanup(cleanMaxLimit);\n            }\n            this.lastCleaningTime = Date.now();\n        }\n    }\n\n    onBuffer(data) {\n        if (this.options.onData) {\n            this.options.onData(data.payload, data.type);\n        }\n\n        if (this.bufferControllers && this.bufferControllers[data.type]) {\n            this.bufferControllers[data.type].feed(data.payload);\n        }\n    }\n\n    /* Events on MSE */\n    onMSEOpen() {\n        this.mseReady = true;\n        if (typeof this.options.onReady === 'function') {\n            this.options.onReady();\n            this.options.onReady = null;\n        }\n        this.createBuffer();\n    }\n\n    onMSEClose() {\n        this.mseReady = false;\n        this.videoStarted = false;\n    }\n\n    onBufferError(data) {\n        if (data.name == 'QuotaExceeded') {\n            this.bufferControllers[data.type].initCleanup(this.node.currentTime);\n            return;\n        }\n\n        if (this.mediaSource.sourceBuffers.length > 0 && this.sourceBuffers[data.type]) {\n            this.mediaSource.removeSourceBuffer(this.sourceBuffers[data.type]);\n        }\n        if (this.mediaSource.sourceBuffers.length == 0) {\n            try {\n                this.mediaSource.endOfStream();\n            } catch (e) {\n                debug.error('mediasource is not available to end');\n            }\n        }\n    }\n}"],"names":["logger","errorLogger","setLogger","console","log","error","message","optionalParams","NALU","nalu","ntype","TYPES","IDR","SEI","SPS","PPS","NDR","AUD","data","payload","nri","type","getNri","byteLength","result","Uint8Array","getSize","view","DataView","buffer","setUint32","set","ExpGolomb","index","bitLength","size","bitsAvailable","moveIndex","getBits","offsetBits","offset","byte","bits","nextSize","leadingZeroCount","skipBits","skipLZ","prefix","readBits","value","readUEG","numberOfBytes","H264Parser","i","length","state","lastIndex","push","subarray","decoder","count","lastScale","nextScale","deltaScale","j","readEG","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","profileIdc","profileCompat","levelIdc","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","readUByte","skipUEG","chromaFormatIdc","readBoolean","skipScalingList","picOrderCntType","skipEG","sarRatio","aspectRatioIdc","unitsInTick","readUInt","timeScale","fixedFrameRate","Math","ceil","remuxer","track","mp4track","sps","config","readSPS","width","height","codec","codecarray","byteOffset","h","getUint8","toString","pps","unit","parsePPS","getData","readyToDecode","parseSPS","isHDAvail","aacHeader","AACParser","headerLength","frameLength","isAACPattern","getHeaderLength","getFrameLength","slice","objectType","sampleIndex","channelCount","headerData","getAACHeaderData","OpusParser","audiosamplerate","Event","listener","event","fn","indexOf","splice","map","each","apply","MP4","types","hasOwnProperty","charCodeAt","videoHdlr","audioHdlr","HDLR_TYPES","dref","stco","STTS","STSC","STCO","STSZ","VMHD","SMHD","STSD","majorBrand","avc1Brand","minorVersion","FTYP","box","ftyp","DINF","dinf","len","hdlr","mdat","timescale","duration","mdhd","mdia","minf","sequenceNumber","mfhd","smhd","stbl","vmhd","sn","baseMediaDecodeTime","moof","traf","tracks","boxes","trak","moov","mvhd","concat","mvex","trex","bytes","samples","flags","dependsOn","isDependedOn","hasRedundancy","sdtp","stsd","stts","stsc","stsz","Array","prototype","call","avcc","avcC","avc1","btrt","configlen","mp4a","esds","Opus","dops","preskip","dOps","startsWith","opus","id","volume","tkhd","sampleDependencyTable","tfhd","tfdt","trun","arraylen","array","sample","cts","isLeading","paddingValue","isNonSync","degradPrio","init","movie","track_id","BaseRemuxer","seq","AACRemuxer","nextDts","dts","getTrackID","aac","units","setAACConfig","isReady","mp4Sample","shift","OpusRemuxer","setOpusConfig","H264Remuxer","h264","keyFrame","parseNAL","isKeyframe","appendByteArray","buffer1","buffer2","buffer3","tmp","secToTime","sec","seconds","hours","minutes","floor","parseInt","RemuxController","streaming","mp4Type","initialized","trackTypes","mediaDuration","Infinity","audioCodec","video","audio","resetTrack","offAll","dispatch","initSegment","allTracks","pay","getPayload","flush","trackPayload","initSegmentMin","remux","BufferController","sourceBuffer","queue","cleaning","pendingCleaning","cleanOffset","cleanRanges","addEventListener","initCleanup","doCleanup","name","range","remove","cleanMaxLimit","updating","buffered","start","end","appendBuffer","e","window","MediaSource","WebKitMediaSource","JMuxmer","isTypeSupported","options","defaults","undefined","Object","assign","debug","node","fps","frameDuration","document","getElementById","sourceBuffers","isMSESupported","setupMSE","remuxController","clearBuffer","addTrack","mode","mseReady","lastCleaningTime","Date","now","keyframeCache","frameCounter","on","onBuffer","bind","createBuffer","startInterval","mediaSource","src","URL","createObjectURL","onMSEOpen","onMSEClose","nalus","aacFrames","chunks","extractNALu","getVideoFrames","frames","extractAAC","extractOpus","getAudioFrames","naluObj","sampleDuration","adjustDuration","numberOfFrames","total","stopInterval","bufferControllers","endOfStream","destroy","videoStarted","isSupported","sb","addSourceBuffer","onBufferError","interval","setInterval","releaseBuffer","flushingTime","doAppend","maxLimit","adjacentOffset","filter","keyframePoint","getSafeBufferClearLimit","currentTime","onData","feed","onReady","removeSourceBuffer"],"mappings":"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"}